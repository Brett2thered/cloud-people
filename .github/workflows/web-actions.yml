# Workflow for building and deploying the web application to Vercel

name: Web App CI/CD Pipeline
env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
    SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
    NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

on:
    push:
        branches: ['main']
        paths:
            - 'apps/web/**'
            - 'packages/**'
            - 'package.json'
            - 'pnpm-lock.yaml'
            - '.github/workflows/**'
    workflow_dispatch:

permissions:
    contents: read
    pages: write
    id-token: write

concurrency:
    group: 'pages'
    cancel-in-progress: false

defaults:
    run:
        shell: bash
        working-directory: apps/web

jobs:
    build:
        name: Build Web App 🛠️
        runs-on: ubuntu-latest
        env:
            SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        steps:
            - name: Checkout 🛎️
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run linter
              working-directory: apps/web
              run: pnpm lint

            - name: Build
              working-directory: apps/web
              run: pnpm build

    deploy:
        name: Deploy Web App to Vercel 🚀
        needs: [build]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: latest
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install Dependencies
              run: |
                  cd /home/runner/work/cloud-people/cloud-people
                  echo "Installing root dependencies..."
                  pnpm install --frozen-lockfile
                  echo "Verifying workspace setup..."
                  pnpm ls -r
                  echo "Checking Next.js installation..."
                  cd apps/web
                  ls -la node_modules/next || echo "Next.js not found in node_modules"
                  echo "Installing web app dependencies..."
                  pnpm install --frozen-lockfile
                  ls -la node_modules/next

            - name: Install Vercel CLI
              run: pnpm add -g vercel@latest

            - name: Link Project
              working-directory: /home/runner/work/cloud-people/cloud-people/apps/web
              run: |
                  echo "Linking project in $(pwd)..."
                  vercel link --confirm --token=${{ secrets.CP_VERCEL_TOKEN }}

            - name: Pull Vercel Environment Information
              working-directory: /home/runner/work/cloud-people/cloud-people/apps/web
              run: vercel pull --yes --environment=production --token=${{ secrets.CP_VERCEL_TOKEN }}

            - name: Set Environment Variables
              working-directory: /home/runner/work/cloud-people/cloud-people/apps/web
              env:
                  CP_VERCEL_TOKEN: ${{ secrets.CP_VERCEL_TOKEN }}
                  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
                  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
                  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
                  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
              run: |
                  echo "" > .env.production
                  echo CP_VERCEL_TOKEN="$CP_VERCEL_TOKEN" >> .env.production
                  echo SUPABASE_URL="$SUPABASE_URL" >> .env.production
                  echo SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY" >> .env.production

            - name: Build Project Artifacts
              working-directory: /home/runner/work/cloud-people/cloud-people/apps/web
              env:
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: |
                  echo "Building from $(pwd) with Next.js..."
                  echo "Node modules contents:"
                  ls -la node_modules/next || echo "Next.js not found in node_modules"
                  echo "Running Vercel build..."
                  vercel build --prod --token=${{ secrets.CP_VERCEL_TOKEN }}

            - name: Deploy Project Artifacts to Vercel
              working-directory: /home/runner/work/cloud-people/cloud-people/apps/web
              env:
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: vercel deploy --prebuilt --prod --token=${{ secrets.CP_VERCEL_TOKEN }}
