name: Supabase Database Migrations

on:
  push:
    branches:
      - main
    paths:
      - 'apps/web/supabase/migrations/**'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/web/supabase/migrations/**'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read

jobs:
  validate:
    name: Validate Migrations 🚀
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: apps/web

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

    steps:
      - name: Checkout repository 📁
        uses: actions/checkout@v4

      - name: Setup Supabase CLI 🚀
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local dev 🚀
        run: supabase start

      - name: Link to Supabase Project 🔗
        run: |
          echo " Verifying project connection..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migrations (dry run) 📝
        run: supabase db push --dry-run

      - name: Verify generated types 📝
        run: |
          # Ensure types directory exists
          mkdir -p types
          # Generate types
          supabase gen types typescript --local > types/supabase.ts
          if [ "$(git diff --ignore-space-at-eol types/supabase.ts | wc -l)" -gt "0" ]; then
            echo "⚠️ Warning: Generated types are not up-to-date. Please run 'supabase gen types typescript --local > types/supabase.ts' locally and commit the changes."
            git diff
            exit 1
          fi

  deploy:
    name: Deploy Migrations 🚀
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    environment: production
    defaults:
      run:
        working-directory: apps/web

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout repository 📁
        uses: actions/checkout@v4

      - name: Setup Supabase CLI 🚀
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project 🔗
        run: |
          echo " Verifying project connection..."
          supabase projects list
          echo " Linking to project..."
          supabase link --project-ref $PROJECT_ID

      - name: Check migration status 📝
        run: |
          echo " Listing all migrations..."
          supabase migration list

          echo " Checking for schema differences..."
          supabase db diff || true

      - name: Pull remote migrations 🔄
        run: |
          echo "📥 Pulling remote migrations first..."
          supabase migration list
          
          echo "🔍 Checking for remote-only migrations..."
          remote_migrations=$(supabase migration list | grep -o '[0-9]\{14\}_remote_schema')
          if [ ! -z "$remote_migrations" ]; then
            echo "⚠️ Found remote migrations not in local repository. Please pull these migrations first."
            exit 1
          fi

      - name: Sync with remote database 🔄
        run: |
          echo "📥 Pulling current database state..."
          # Capture the output of db pull to parse for migration IDs if it fails
          output=$(supabase db pull 2>&1) || {
            echo "$output"
            if echo "$output" | grep -q "migration repair --status reverted"; then
              migration_id=$(echo "$output" | grep -o '[0-9]\{14\}')
              if [ ! -z "$migration_id" ]; then
                echo "🔧 Repairing specific migration: $migration_id"
                echo "y" | supabase migration repair --status reverted "$migration_id"
              fi
            fi
          }

          echo "🔧 Running general migration repair if needed..."
          # Use yes command to automatically answer "y" to the prompt
          yes | supabase migration repair --status reverted || true

          echo "🔄 Pulling database state again after repairs..."
          supabase db pull

      - name: Apply migrations 🔄
        run: |
          echo " Applying migrations to production database"
          supabase db push --debug

          echo " Verifying migrations were applied..."
          supabase migration list

          echo " Checking for remaining differences..."
          supabase db diff || true

      - name: Start Supabase for type generation 🚀
        run: |
          echo " Starting Supabase..."
          supabase start || {
            echo " Failed to start Supabase normally, trying with debug..."
            supabase start --debug
          }

      - name: Generate and update types 📝
        run: |
          echo " Generating TypeScript types"
          mkdir -p types
          supabase gen types typescript --local > types/supabase.ts

      - name: Stop Supabase 🛑️
        if: always()
        run: supabase stop
