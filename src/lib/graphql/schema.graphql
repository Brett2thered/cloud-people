scalar UUID
scalar JSON
scalar DateTime

enum WorkflowState {
    Initial
    Build
    Running
    Complete
    Error
}

type Edge {
    id: ID!
    createdAt: String!
    workflowId: ID!
    toNodeId: ID!
    fromNodeId: ID!
    updatedAt: String
}

type Node {
    id: ID!
    createdAt: String!
    workflowId: ID!
    state: String
    currentStep: String
    updatedAt: String
}

type Profile {
    id: ID!
    createdAt: String
    email: String
    updatedAt: String
    subscriptionPlan: String
    username: String
    firstName: String
    lastName: String
}

type Workflow {
    id: ID!
    userId: ID!
    state: WorkflowState!
    currentStep: String
    data: JSON
    createdAt: String
    updatedAt: String
}

input EdgesFilter {
    id: ID
    workflowId: ID
    fromNodeId: ID
    toNodeId: ID
}

input NodesFilter {
    id: ID
    workflowId: ID
    state: String
}

input ProfilesFilter {
    id: ID
    email: String
    username: String
}

input WorkflowsFilter {
    id: ID
    userId: ID
    state: WorkflowState
}

type Query {
    getEdges: [Edge]
    getNodes: [Node]
    getProfiles: [Profile]
    getWorkflows: [Workflow]
}

type Mutation {
    createEdge(workflowId: ID!, toNodeId: ID!, fromNodeId: ID!): Edge
    updateEdge(id: ID!, workflowId: ID, toNodeId: ID, fromNodeId: ID): Edge
    deleteEdges(filter: EdgesFilter, atMost: Int! = 1): DeleteResponse

    createNode(workflowId: ID!, state: String, currentStep: String): Node
    updateNode(id: ID!, workflowId: ID, state: String, currentStep: String): Node
    deleteNodes(filter: NodesFilter, atMost: Int! = 1): DeleteResponse

    createProfile(email: String, username: String, firstName: String, lastName: String): Profile
    updateProfile(id: ID!, email: String, username: String, firstName: String, lastName: String): Profile
    deleteProfiles(filter: ProfilesFilter, atMost: Int! = 1): DeleteResponse

    createWorkflow(userId: ID!, state: WorkflowState!, currentStep: String, data: JSON): Workflow
    updateWorkflow(id: ID!, userId: ID, state: WorkflowState, currentStep: String, data: JSON): Workflow
    deleteWorkflows(filter: WorkflowsFilter, atMost: Int! = 1): DeleteResponse
}

type DeleteResponse {
    success: Boolean!
    message: String
    deletedRecords: [ID]
}
